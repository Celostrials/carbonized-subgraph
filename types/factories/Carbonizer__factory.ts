/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Carbonizer, CarbonizerInterface } from "../Carbonizer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gTokenVaultAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_carbonizedCollection",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "carbonizedCollection",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "gTokenVault",
    outputs: [
      {
        internalType: "contract ImpactVaultInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getYield",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawls",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e5838038062000e58833981810160405281019062000037919062000217565b620000576200004b620000e160201b60201c565b620000e960201b60201c565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200025e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001df82620001b2565b9050919050565b620001f181620001d2565b8114620001fd57600080fd5b50565b6000815190506200021181620001e6565b92915050565b60008060408385031215620002315762000230620001ad565b5b6000620002418582860162000200565b9250506020620002548582860162000200565b9150509250929050565b610bea806200026e6000396000f3fe60806040526004361061009c5760003560e01c80638da5cb5b116100645780638da5cb5b1461014e578063b1dd03fa14610179578063c399ec88146101a4578063d0e30db0146101cf578063f2fde38b146101d9578063f3576220146102025761009c565b80631e83409a146100a15780633ccfd60b146100ca5780636e5837b6146100e1578063715018a61461010c5780637c26287114610123575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c391906108b5565b61022e565b005b3480156100d657600080fd5b506100df6102c1565b005b3480156100ed57600080fd5b506100f6610352565b60405161010391906108f1565b60405180910390f35b34801561011857600080fd5b50610121610378565b005b34801561012f57600080fd5b5061013861038c565b6040516101459190610925565b60405180910390f35b34801561015a57600080fd5b5061016361043e565b60405161017091906108f1565b60405180910390f35b34801561018557600080fd5b5061018e610467565b60405161019b919061099f565b60405180910390f35b3480156101b057600080fd5b506101b961048d565b6040516101c69190610925565b60405180910390f35b6101d761053f565b005b3480156101e557600080fd5b5061020060048036038101906101fb91906108b5565b6105cf565b005b34801561020e57600080fd5b50610217610653565b6040516102259291906109ba565b60405180910390f35b6000610238610653565b509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102a557600080fd5b505af11580156102b9573d6000803e3d6000fd5b505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309cae2c830306040518363ffffffff1660e01b815260040161031e9291906109e3565b600060405180830381600087803b15801561033857600080fd5b505af115801561034c573d6000803e3d6000fd5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610380610708565b61038a6000610786565b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166364c33977306040518263ffffffff1660e01b81526004016103e991906108f1565b60206040518083038186803b15801561040157600080fd5b505afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190610a38565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104ea91906108f1565b60206040518083038186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190610a38565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d2da80634306040518363ffffffff1660e01b815260040161059b91906108f1565b6000604051808303818588803b1580156105b457600080fd5b505af11580156105c8573d6000803e3d6000fd5b5050505050565b6105d7610708565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063e90610ae8565b60405180910390fd5b61065081610786565b50565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a9262a2306040518263ffffffff1660e01b81526004016106b191906108f1565b604080518083038186803b1580156106c857600080fd5b505afa1580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190610b08565b915091509091565b61071061084a565b73ffffffffffffffffffffffffffffffffffffffff1661072e61043e565b73ffffffffffffffffffffffffffffffffffffffff1614610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077b90610b94565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061088282610857565b9050919050565b61089281610877565b811461089d57600080fd5b50565b6000813590506108af81610889565b92915050565b6000602082840312156108cb576108ca610852565b5b60006108d9848285016108a0565b91505092915050565b6108eb81610877565b82525050565b600060208201905061090660008301846108e2565b92915050565b6000819050919050565b61091f8161090c565b82525050565b600060208201905061093a6000830184610916565b92915050565b6000819050919050565b600061096561096061095b84610857565b610940565b610857565b9050919050565b60006109778261094a565b9050919050565b60006109898261096c565b9050919050565b6109998161097e565b82525050565b60006020820190506109b46000830184610990565b92915050565b60006040820190506109cf6000830185610916565b6109dc6020830184610916565b9392505050565b60006040820190506109f860008301856108e2565b610a0560208301846108e2565b9392505050565b610a158161090c565b8114610a2057600080fd5b50565b600081519050610a3281610a0c565b92915050565b600060208284031215610a4e57610a4d610852565b5b6000610a5c84828501610a23565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ad2602683610a65565b9150610add82610a76565b604082019050919050565b60006020820190508181036000830152610b0181610ac5565b9050919050565b60008060408385031215610b1f57610b1e610852565b5b6000610b2d85828601610a23565b9250506020610b3e85828601610a23565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b7e602083610a65565b9150610b8982610b48565b602082019050919050565b60006020820190508181036000830152610bad81610b71565b905091905056fea26469706673582212208c3ab8c8214a85bb7d0ce4d9b227e6025f4ee43d02e008a7f583750c6ac1c9ac64736f6c63430008090033";

export class Carbonizer__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _gTokenVaultAddress: string,
    _carbonizedCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Carbonizer> {
    return super.deploy(
      _gTokenVaultAddress,
      _carbonizedCollection,
      overrides || {}
    ) as Promise<Carbonizer>;
  }
  getDeployTransaction(
    _gTokenVaultAddress: string,
    _carbonizedCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _gTokenVaultAddress,
      _carbonizedCollection,
      overrides || {}
    );
  }
  attach(address: string): Carbonizer {
    return super.attach(address) as Carbonizer;
  }
  connect(signer: Signer): Carbonizer__factory {
    return super.connect(signer) as Carbonizer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CarbonizerInterface {
    return new utils.Interface(_abi) as CarbonizerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Carbonizer {
    return new Contract(address, _abi, signerOrProvider) as Carbonizer;
  }
}
